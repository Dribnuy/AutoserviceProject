import { blogService } from './services/firebase/BlogService';

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–Ω–æ–Ω—ñ–º–Ω—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é (IIFE)
(async () => {
  console.log('--- üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ —Ç–µ—Å—Ç BlogService ---');

  let newPostId: string | undefined;

  try {
    // --- 1. –¢–µ—Å—Ç CREATE ---
    console.log('\n–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞...');
    const newPost = await blogService.createPost(
      {
        title: '–ú—ñ–π –¢–µ—Å—Ç–æ–≤–∏–π –ü–æ—Å—Ç',
        slug: `test-post-${Date.now()}`,
        excerpt: '–¶–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ—Å—Ç...',
        contentMw: '## –ü—Ä–∏–≤—ñ—Ç',
        coverImageURL: 'http://example.com/img.png',
        locale: 'uk',
        states: 'draft',
        tags: ['test', 'typescript'],
        publishedAt: null,
      },
      'test-user-id' // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π userId
    );
    newPostId = newPost.id;
    console.log(`‚úÖ –ü–æ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ, ID: ${newPostId}`);

    // --- 2. –¢–µ—Å—Ç GET BY ID ---
    console.log('\n–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å—Ç–∞ –ø–æ ID...');
    const post = await blogService.getById(newPostId!);
    console.log(
      `‚úÖ –ü–æ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ: ${post?.title} (—Å—Ç–∞—Ç—É—Å: ${post?.states})`
    );

    // --- 3. –¢–µ—Å—Ç UPDATE (Publish) ---
    console.log('\n–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –ø–æ—Å—Ç–∞...');
    const publishedPost = await blogService.publish(newPostId!);
    console.log(
      `‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ, –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å: ${publishedPost.states}, –¥–∞—Ç–∞: ${publishedPost.publishedAt}`
    );

    // --- 4. –¢–µ—Å—Ç GET PUBLISHED ---
    console.log('\n–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö...');
    const published = await blogService.getPublished('uk');
    const justPublished = published.find((p) => p.id === newPostId);
    console.log(
      `‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${published.length} –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö. –ù–∞—à –ø–æ—Å—Ç —É —Å–ø–∏—Å–∫—É: ${
        !!justPublished
      }`
    );

    // --- 5. –¢–µ—Å—Ç GET BY SLUG ---
    console.log('\n–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ slug...');
    const postBySlug = await blogService.getBySlug(
      newPost.slug,
      newPost.locale
    );
    console.log(
      `‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ slug: ${postBySlug?.title} (ID: ${postBySlug?.id})`
    );
  } catch (error) {
    console.error('‚ùå –ü—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞:', error);
  } finally {
    // --- 6. –¢–µ—Å—Ç DELETE (–û—á–∏—Å—Ç–∫–∞) ---
    if (newPostId) {
      console.log(`\n–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ (ID: ${newPostId})...`);
      await blogService.delete(newPostId);

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
      const deletedPost = await blogService.getById(newPostId);
      if (!deletedPost) {
        console.log('‚úÖ –ü–æ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.');
      } else {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: –ü–æ—Å—Ç –Ω–µ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.');
      }
    }
    console.log('--- üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ ---');
  }
})();